import React, { useState, useCallback } from 'react'
import { Formik, Field, Form, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { Button, Modal } from 'react-bootstrap'
import axios from 'axios'

const ProductModal = (props) => {

  /* destructure props for some dependencies */
  // const { loginErrorStatus, closeModalAction } = props;

  // /* Submit  the values to database*/
  // const submitProductInfo = useCallback(async (values, setSubmitting) => {
  //   try {
  //     const res = await axios({
  //       url: 'http://localhost/school-reg/src/api/product-action.php',
  //       method: 'POST',
  //       headers: {
  //         'Content-Type': 'application/json'
  //       },
  //       data: values
  //     })
  //     const resData = await res.data
  //     // console.log(resData)
  //     if (resData.error === false) {
  //       //get updated student data for first load and update/insert
  //       if (values.actionType !== 'delete-product-entry') {
  //         dispatch(fetchProductData(values.studentId)).then(() => {
  //           closeModalAction()//close modal
  //         });
  //       } else {
  //         closeModalAction()//close modal
  //       }
  //     }
  //     setSubmitting(false);
  //     return resData
  //   } catch (error) {
  //     setSubmitting(false);
  //     return {
  //       'error': true,
  //       'message': 'Fetch Error: ' + error
  //     };
  //   }

  // }, [closeModalAction, dispatch])

  // /* Add Product Handler */
  // const addProductHandler = useCallback(async (values, setSubmitting) => {
  //   const tokenData = await tokenConfirmationHandler('student');
  //   loginErrorStatus(tokenData.error);//send login error status to Product page
  //   if (tokenData.error === false) {
  //     values = {
  //       ...values, ...{
  //         'studentId': tokenData.info.data.id,
  //         'actionType': 'add-product-entry'
  //       }
  //     };
  //     submitProductInfo(values, setSubmitting)
  //   }
  //   setSubmitting(false);
  // }, [loginErrorStatus, submitProductInfo])

  /* Edit Product Handler */
  // const editProductHandler = useCallback(async (values, setSubmitting) => {
  //   const tokenData = await tokenConfirmationHandler('student');
  //   loginErrorStatus(tokenData.error);//send login error status to Product page
  //   if (tokenData.error === false) {
  //     values = {
  //       ...values, ...{
  //         'studentId': tokenData.info.data.id,
  //         'editId': itemId,
  //         'actionType': 'edit-product-entry'
  //       }
  //     };
  //     submitProductInfo(values, setSubmitting)
  //   }
  //   setSubmitting(false);
  // }, [loginErrorStatus, submitProductInfo, itemId])

  /* Delete Product Handler */
  // const deleteProductHandler = useCallback(async (setSubmitting) => {
  //   const tokenData = await tokenConfirmationHandler('student');
  //   loginErrorStatus(tokenData.error);//send login error status to Product page
  //   if (tokenData.error === false) {
  //     const values = {
  //       'studentId': tokenData.info.data.id,
  //       'deleteId': itemId,
  //       'actionType': 'delete-product-entry'
  //     };
  //     const submitResData = await submitProductInfo(values, setSubmitting)

  //     if (submitResData.error === false) {
  //       dispatch(removeProductData(itemId))
  //     }
  //   }
  //   setSubmitting(false);
  // }, [loginErrorStatus, submitProductInfo, itemId, dispatch])

  switch (props.type) {
    case 'add-product':
      return (
        <Modal show={props.showModal} onHide={props.closeModalAction}>
          {/* <Modal.Header closeButton>
            <Modal.Title>Add Product</Modal.Title>
          </Modal.Header>
          <Formik
            initialValues={
              {
                schoolName: '',
                startDate: '',
                endDate: ''
              }
            }
            enableReinitialize={true}
            validationSchema={Yup.object({
              schoolName: Yup.string().required('Enter the school name'),
              startDate: Yup.string().required('Enter start date'),
              endDate: Yup.string().required('Enter graduation date')
            })}
            onSubmit={(values, { setSubmitting }) => {
              setTimeout(() => {
                addProductHandler(values, setSubmitting)
              }, 400);
            }}
          >
            {({
              isSubmitting
            }) => (
              <Form method="POST" id="add-product-form" className="add-product-form" name="add-product-form">
                <Modal.Body>
                  <div className='form-row'>
                    <div className="form-group col-12">
                      <label className='modal-form-label'>Name of school</label>
                      <Field name="schoolName" disabled={isSubmitting} type='text' className="form-control" placeholder="School Name" />
                      <div className="form-error">
                        <ErrorMessage name="schoolName" />
                      </div>
                    </div>
                  </div>
                  <div className="form-row">
                    <div className="form-group col-sm-6">
                      <label className='modal-form-label'>Start Date</label>
                      <DatePicker
                        name="startDate" disabled={isSubmitting} type="text" className="form-control"
                        placeholderText="YYYY-MM-DD"
                        selected={startDate}
                        onChange={date => setStartDate(date)}
                        maxDate={new Date()}
                        dateFormat="yyyy-MM-dd"
                      />
                      <div className="form-error">
                        <ErrorMessage name="startDate" />
                      </div>
                    </div>
                    <div className="form-group col-sm-6">
                      <label className='modal-form-label'>End Date</label>
                      <DatePicker
                        name="endDate" disabled={isSubmitting} type="text" className="form-control"
                        placeholderText="YYYY-MM-DD"
                        selected={endDate}
                        onChange={date => setEndDate(date)}
                        maxDate={new Date()}
                        dateFormat="yyyy-MM-dd"
                      />
                      <div className="form-error">
                        <ErrorMessage name="endDate" />
                      </div>
                    </div>
                  </div>
                </Modal.Body>
                <Modal.Footer>
                  <Button className='btn btn-light' onClick={() => props.closeModalAction} type=''>
                    Close
                  </Button>
                  <button
                    className="btn btn-primary"
                    type="submit"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ?
                      (
                        <>
                          <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                          <span> Processing..</span>
                        </>
                      ) : ("Add Entry")}
                  </button>
                </Modal.Footer>
              </Form>
            )}
          </Formik> */}
        </Modal>
      )
    case 'edit-product':

      return (
        <Modal show={props.showModal} onHide={props.closeModalAction}>
          {itemData ?
            <>
              <Modal.Header closeButton>
                <Modal.Title>Edit Product</Modal.Title>
              </Modal.Header>
              <Formik
                initialValues={{
                  schoolName: itemData ? itemData.schoolName : '',
                  startDate: itemData ? itemData.startDate : '',
                  endDate: itemData ? itemData.endDate : ''
                }}
                enableReinitialize={true}
                validationSchema={Yup.object({
                  schoolName: Yup.string().required('Enter the school name'),
                  startDate: Yup.string().required('Enter start date'),
                  endDate: Yup.string().required('Enter graduation date')
                })}
                onSubmit={(values, { setSubmitting }) => {
                  // console.log(setSubmitting)                  
                  setTimeout(() => {
                    editProductHandler(values, setSubmitting);
                  }, 400);
                }}
              >
                {({
                  isSubmitting
                }) => (
                  <Form method="POST" id="edit-product-form" className="edit-product-form" name="edit-product-form">
                    <Modal.Body>
                      <div className='form-row'>
                        <div className="form-group col-12">
                          <label className='modal-form-label'>Name of school</label>
                          <Field name="schoolName" disabled={isSubmitting} type='text' className="form-control" placeholder="School Name"
                          />
                          <div className="form-error">
                            <ErrorMessage name="schoolName" />
                          </div>
                        </div>
                      </div>

                      <div className="form-row">
                        <div className="form-group col-sm-6">
                          <label className='modal-form-label'>Start Date</label>
                          <DatePicker
                            name="startDate"
                            disabled={isSubmitting}
                            type="text"
                            className="form-control"
                            placeholderText="YYYY-MM-DD"
                            selected={startDate}
                            onChange={date => setStartDate(date)}
                            value={itemData.startDate}
                            maxDate={new Date()}
                            dateFormat="yyyy-MM-dd"
                          />
                          <div className="form-error">
                            <ErrorMessage name="startDate" />
                          </div>
                        </div>
                        <div className="form-group col-sm-6">
                          <label className='modal-form-label'>End Date</label>
                          <DatePicker
                            name="endDate"
                            disabled={isSubmitting}
                            type="text"
                            className="form-control"
                            placeholderText="YYYY-MM-DD"
                            selected={endDate}
                            onChange={date => setEndDate(date)}
                            value={itemData.endDate}
                            maxDate={new Date()}
                            dateFormat="yyyy-MM-dd"
                          />
                          <div className="form-error">
                            <ErrorMessage name="endDate" />
                          </div>
                        </div>
                      </div>
                    </Modal.Body>

                    <Modal.Footer>
                      <Button className='btn btn-light' onClick={() => props.closeModalAction} type=''>
                        Close
                      </Button>
                      <button
                        className="btn btn-primary"
                        type="submit"
                        disabled={isSubmitting}
                      >
                        {isSubmitting ?
                          <>
                            <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Processing..</span>
                          </>
                          : "Edit Entry"}
                      </button>
                    </Modal.Footer>
                  </Form>
                )}
              </Formik>
            </>
            :
            <span className="spinner-border spinner-border-sm modal-spinner" role="status" aria-hidden="true"></span>
          }
        </Modal>
      )

    case 'delete-product':
      return (
        <Modal show={props.showModal} onHide={props.closeModalAction}>
          {itemData ?
            <>
              <Modal.Header closeButton>
                <Modal.Title>Delete Product Entry</Modal.Title>
              </Modal.Header>
              <Modal.Body>
                Are you sure you want to delete this entry?
              </Modal.Body>
              <Modal.Footer>
                <Formik
                  initialValues={{}}
                  enableReinitialize={true}
                  validationSchema={Yup.object({})}
                  onSubmit={(values, { setSubmitting }) => {
                    setTimeout(() => {
                      //alert(values)
                      deleteProductHandler(setSubmitting);
                    }, 400);
                  }}
                >
                  {({
                    isSubmitting
                  }) => (
                    <Form>
                      <Button variant="btn-light" onClick={props.closeModalAction}>
                        Close
                      </Button>

                      <Button type='submit' variant="primary">
                        {isSubmitting ?
                          <>
                            <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Processing..</span>
                          </>
                          :
                          "Delete"
                        }
                      </Button>
                    </Form>
                  )
                  }
                </Formik>
              </Modal.Footer>
            </>
            :
            <span className="spinner-border spinner-border-sm modal-spinner" role="status" aria-hidden="true"></span>
          }
        </Modal>
      )

    default:
      return (
        <div></div>
      )

  }
}

export default ProductModal
